[gcode_macro START_PRINT_PLA]
description: Start G-Code
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
  G21
  G90
  M82
  M104 S150
  M140 S{BED_TEMP}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  BED_MESH_PROFILE LOAD=default
  SET_GCODE_OFFSET Z=0
  M106 S255
  G1 Z100 F2500
  G1 X-130 F2500
  M190 S{BED_TEMP}
  M109 S{EXTRUDER_TEMP}
  M106 S0
  G1 Z1 F2500
  G1 X-130 Y0 Z0.4
  G92 E0
  G3 X0 Y-130 Z0.4 I130 E40 F1500  J-0.5
  G92 E0
  SET_TMC_CURRENT STEPPER=extruder CURRENT=0.8
  

[gcode_macro END_PRINT]
description: End G-Code
gcode:
  M106 S0
  M104 S0
  M140 S0
  G92 E0
  G91
  G1 E-1 F300
  G1 Z+5 F6000
  G28
  G90
  SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
  boxfan_off
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  M106 S255
  UPDATE_DELAYED_GCODE ID=heatsink DURATION=30

[gcode_macro START_PRINT]
gcode:
    relay_on
    {% set sd_filename = printer.virtual_sdcard.file_path|string %}
    SAVE_VARIABLE VARIABLE=sd_filename VALUE='"{sd_filename}"'
    SAVE_VARIABLE VARIABLE=was_interrupted VALUE=True
    SAVE_VARIABLE VARIABLE=file_position VALUE=0
    SAVE_VARIABLE VARIABLE=x_pos VALUE=0.0
    SAVE_VARIABLE VARIABLE=y_pos VALUE=0.0
    SAVE_VARIABLE VARIABLE=z_pos VALUE=0.0
    SAVE_VARIABLE VARIABLE=e_pos VALUE=0.0
    SET_TMC_CURRENT STEPPER=extruder CURRENT=0.8
    UPDATE_DELAYED_GCODE ID=heatsink DURATION=0
    CLEAR_PAUSE
    M105 S1
    M106 S255
    boxfan_on

#[gcode_macro END_PRINT]     #End print thats used in power loss recovery
#gcode:
    #SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
    #boxfan_off
    #SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    #M106 S255
    #UPDATE_DELAYED_GCODE ID=heatsink DURATION=100


[delayed_gcode heatsink]
initial_duration: 0 #if initial_duration is zero, the delayed gcode won't start by default
gcode:
    M106 S0
    UPDATE_DELAYED_GCODE ID=heatsink DURATION=0

####################################################################################################################################
#PAUSE ,RESUME ,CANCEL_PRINT
####################################################################################################################################
[pause_resume]

[gcode_macro PAUSE] 
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% if printer.print_stats.state == "printing" %}
        {% set x = params.X|default(0) %}      #edit to your park position
        {% set y = params.Y|default(-110) %}      #edit to your park position
        {% set z = params.Z|default(10)|float %} #edit to your park position
        {% set e = params.E|default(1) %}        #edit to your retract length

        ##### calculate save lift position #####
        {% set max_z = printer.toolhead.axis_maximum.z|float %}
        {% set homed_z = printer.gcode_move.homing_origin[2]|float %}
        {% set limit_z = (max_z - homed_z)|round(4,'floor') %}
        {% set act_z = printer.toolhead.position.z|float %}
        {% set lift_z = z|abs %}

        ### If the current position is greater than max_z-60, xy is set to 0###
        ### Normally, the max_z-limit_z is around 46mm,now expand 50mm###
        {% if act_z >= limit_z - 60 %}
            {% set x = 0 %}
            {% set y = 0 %}
        {% endif %}

        {% if act_z < (limit_z - lift_z) %}
            {% set z_safe = act_z + lift_z %}
        {% else %}
            {% set z_safe = limit_z %}
        {% endif %}

        {% set fan_speed = printer.fan.speed|float %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=fan_speed VALUE={fan_speed}
        ##### end of definitions #####
        PAUSE_BASE
        G91
        {% if printer.extruder.can_extrude|lower == 'true' %}
            G1 E-{e} F2100
        {% else %}
            {action_respond_info("Extruder not hot enough")}
        {% endif %}
        {% if "xyz" in printer.toolhead.homed_axes %}
            G90
            # Move the Z-axis to a safe height to avoid collision with the bed or other objects 
            G1 z{z_safe} F6000
            # Move the X and Y axes to the specified position
            G1 X{x} Y{y} F6000
            # clear bed_mesh Z fade height
            G1 X{x} Y{y} F6000
            M117 Pause and move to X={ x } Y={ y } Z={ z_safe }
        {% else %}
            {action_respond_info("Printer not homed")}
        {% endif %}
        {% set nozzle_temp = printer.extruder.target|float %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=nozzle_temp VALUE={nozzle_temp}
        M104 S90
        {% set bed_temp = printer.heater_bed.target|float %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=bed_temp VALUE={bed_temp}
        M106 S204
        F108
        M400
    {% endif %}

    

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_fan_speed: 0
variable_nozzle_temp: 0
variable_bed_temp: 0
gcode:
    ##### set defaults #####
    {% if printer.print_stats.state == "paused" %}
        M140 S{bed_temp}
        M109 S{nozzle_temp}
        {% set e = params.E|default(1) %} #edit to your retract length
        #### get VELOCITY parameter if specified ####
        {% if 'VELOCITY' in params|upper %}
            {% set get_params = ('VELOCITY=' + params.VELOCITY) %}
        {%else %}
            {% set get_params = "" %}
        {% endif %}
        ##### end of definitions #####
        G91
        {% if nozzle_temp >= 180 %}
            G1 E{e} F2100
        {% else %}
            {action_respond_info("Extruder not hot enough")}
        {% endif %}
        G90
        M400
        RESUME_BASE {get_params}
        {% set fan_speed = fan_speed * 255 %}
        M106 S{fan_speed}
    {% endif %}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
    F100
    M106 S0
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
    M105 S1
    G28
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    boxfan_off
    M106 S255
    UPDATE_DELAYED_GCODE ID=heatsink DURATION=100    

[force_move]
enable_force_move: True

[gcode_macro RESTORE_E_CURRENT]
gcode:
    SET_TMC_CURRENT STEPPER=extruder CURRENT=1.2

###########################################################################################################################
# M106 Fan
###########################################################################################################################
[gcode_macro M106]
description: fan speed control
rename_existing: M106.1
gcode:
    {% set last_fan_speed = printer.fan.speed|float %}
    {% set max_power = printer.fan.max_power|float %}
    {% set last_fan_value = last_fan_speed/max_power %}
    {% set fan_speed = params.S|default(255)|int %}
    {% if last_fan_value < 0.1 and fan_speed > 100 %}
        M106.1 S60
        SET_GCODE_VARIABLE MACRO=set_fan VARIABLE=fan_speed VALUE={fan_speed}
        UPDATE_DELAYED_GCODE ID=setfan DURATION=2
    {% else %}
        M106.1 S{fan_speed}
    {% endif %}
[gcode_macro set_fan]
variable_fan_speed: 0
gcode:
    M106.1 S{fan_speed}
[delayed_gcode setfan]
initial_duration: 0 #if initial_duration is zero, the delayed gcode won't start by default
gcode:
    set_fan
    UPDATE_DELAYED_GCODE ID=setfan DURATION=0


#####################################
# Bed Leveling
##################################

[gcode_macro bed_level_1]
gcode:
    SET_GCODE_OFFSET Z=0
    M117 BED LEVEL START !
    G28
    M204 S200
    M104 S140
    M140 S60
    M109 S140
    M190 S60
    delta_calibrate
    G1 X0 Y0 Z50 F4200
    M104 S0
    M140 S0
    G28
    F104 K=level_state V=True
    save_config

[gcode_macro bed_level_2]
gcode:
    G28
    M204 S200
    M104 S140
    M140 S60
    M109 S140
    M190 S60
    G1 X0 Y0 Z50 F4200
    bed_mesh_calibrate
    G1 X0 Y0 Z50 F4200
    M104 S0
    M140 S0
    G28
    F104 K=level2_state V=True
    save_config


#############################
# Load/Unload filament & M600
##############################

#[gcode_macro UNLOAD_FILAMENT2] #unload filament
#gcode:
    #{% set speed_factor = printer.gcode_move.speed_factor|float %}
    #{% set extrude_factor = printer.gcode_move.extrude_factor|float %}
    #M117 unload_filament heating completed!
    #G91
    #M220 S100   # set speed_factor to normal
    #M221 S100   # set extrude_factor to normal
    #G1 E30 F300
    #G1 E-100 F200
    #M400
    #M220 S{speed_factor*100} # recover speed_factor
    #M221 S{extrude_factor*100} # recover extrude_factor
    #G90
    #M117 unload_filament done!


    
[gcode_macro _UNLOAD_FILAMENT]
description: Unload Filament
gcode:
  {% set HOTEND_TEMP=params.HOTEND_TEMP|default(240)|float %}
  M109 S{HOTEND_TEMP}
  RESPOND MSG="Unloading filament..."
  G91
  G1 E10 F500
  G1 E-20 F2000
  G1 E-45 F1000
  G90
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  M117 unload_filament done!


[gcode_macro LOAD_FILAMENT] #load filament
gcode:
    {% set speed_factor = printer.gcode_move.speed_factor|float %}
    {% set extrude_factor = printer.gcode_move.extrude_factor|float %}

    M117 load_filament heating completed!
    G91
    M220 S100    # set speed_factor to normal
    M221 S100    # set extrude_factor to normal
    G1 E70 F800
    G1 E30 F300
    M400
    M220 S{speed_factor*100}  # recover speed_factor
    M221 S{extrude_factor*100}  # recover extrude_factor
    G90
    M117 load_filament done!

##[gcode_macro M600]
##gcode:
##    PAUSE

[gcode_macro M600]
description: Filament change
variable_hotend_temp: 0
variable_m600_enabled: 0
gcode:
  ##### set defaults #####
  {% set x = params.X|default(0) %}
  {% set y = params.Y|default(-122) %}
  {% set z = params.Z|default(10)|float %}
  {% set e = params.E|default(1) %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
  {% set z_safe = lift_z %}
  {% else %}
  {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=M600_state
  SET_IDLE_TIMEOUT TIMEOUT=86400
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=m600_enabled VALUE=1
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=hotend_temp VALUE={printer.extruder.target}
  RESPOND MSG="Pausing..."
  PAUSE
  G91
  G1 E-{e} F2100
  G1 Z{z_safe}
  G90
  G1 X{x} Y{y} F2500
  RESPOND MSG="Unloading filament..."
  G91
  G0 E-5 F300
  G0 E-70 F800
  M400
  RESPOND MSG="Heating stopped!"
  M109 S0
  M106 S0
  RESTORE_GCODE_STATE NAME=M600_state


[gcode_macro _PAUSE_AFTER_DISTANCE]
description: Pause printing after a certain length of extruded filament
variable_end_d: 0
variable_was_paused: 0
gcode:
  {% set d_start = printer.print_stats.filament_used|float %}
  {% set d_end = (d_start + params.D|float)|float %}
  SET_GCODE_VARIABLE MACRO=_PAUSE_AFTER_DISTANCE VARIABLE=end_d VALUE={d_end}
  RESPOND MSG="Pause will be done when {d_end|round(2)}mm of filament have been extruded."
  UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=1

[delayed_gcode PAUSE_AT_DISTANCE]
initial_duration: 0
gcode:
  {% if printer.print_stats.state == "printing" %}
    {% set was_paused = printer["gcode_macro _PAUSE_AFTER_DISTANCE"].was_paused %}
    {% if was_paused %}
      {% if printer["filament_switch_sensor _filament_sensor"].filament_detected %}
        RESPOND MSG="Filament replaced! Pause canceled."
        SET_GCODE_VARIABLE MACRO=_PAUSE_AFTER_DISTANCE VARIABLE=was_paused value=0
        UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=0
      {% else %}
        RESPOND MSG="Filament not replaced... Pause will be done."
        SET_GCODE_VARIABLE MACRO=_PAUSE_AFTER_DISTANCE VARIABLE=was_paused value=0
        UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=1
      {% endif %}
    {% else %}
      {% set d_current = printer.print_stats.filament_used|float %}
      {% if d_current < printer["gcode_macro _PAUSE_AFTER_DISTANCE"].end_d %}
        UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=1
      {% else %}
        UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=0
        M600
      {% endif %}
    {% endif %}
  {% else %}
    {% if printer.print_stats.state == "paused" %}
      SET_GCODE_VARIABLE MACRO=_PAUSE_AFTER_DISTANCE VARIABLE=was_paused value=1
      UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=1
    {% else %}
      RESPOND MSG="Filament not replaced... Pause canceled because print was stopped."
      SET_GCODE_VARIABLE MACRO=_PAUSE_AFTER_DISTANCE VARIABLE=was_paused value=0
      UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=0
    {% endif %}
  {% endif %}


#################################
#### offesets
################################

[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %} 
        {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}
    
    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
    
    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    {%if 'Z_ADJUST' in params %}
        {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
        {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}

        _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}

        { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}|
    {% if printer.save_temp_variables.variables.level_state %}
        F104 K=level_state V=False
        M117 BedLevel1 Done
        bed_level_2
    {% endif %}|
    {% if printer.save_temp_variables.variables.level2_state %}
        F104 K=level2_state V=False
        M117 BedLevel Done
    {% endif %}|
    {% if printer.save_variables.variables.resonances_state %}
        SAVE_VARIABLE VARIABLE=resonances_state VALUE=False
        G28
        M117 Vibration Compensation Done
    {% endif %}
    SAVE_VARIABLE VARIABLE=plr_flag VALUE=False


##############################################
#PID
#############################################

[gcode_macro PID_BED_60]
description: Start Bed PID
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  M106 S160
  G1 Z50 F1500
  RESPOND MSG="Bed PID in progress..."
  PID_CALIBRATE HEATER=heater_bed TARGET=60{params.TEMP|default(60)}
  G28
  SAVE_CONFIG
  {% endif %}

[gcode_macro PID_BED_90]
description: Start Bed PID
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  M106
  G1 Z50 F1500
  RESPOND MSG="Bed PID in progress..."
  PID_CALIBRATE HEATER=heater_bed TARGET=90{params.TEMP|default(60)}
  G28
  SAVE_CONFIG
  {% endif %}

[gcode_macro CALIBRATION_PID_HOTEND]
description: Start Hotend PID Calibration
gcode:
  {% set HOTEND_TEMP=params.HOTEND_TEMP|default(350)|float %}
  {% if printer.idle_timeout.state == "Printing" %}
    RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
    _SCREEN_LED_ON R=1 O=1 W=0
    RESPOND MSG="Starting Hotend PID calibration..."
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28
    {% endif %}
    G90
    G1 Z50 F6000
    M400
    M106 
    PID_CALIBRATE HEATER=extruder TARGET={HOTEND_TEMP}
    M107
    G28
    M400
    RESPOND MSG="Hotend PID calibration done!"
    SAVE_CONFIG
  {% endif %}

[gcode_macro PID_HOTEND_260]
description: Start Hotend PID
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  M106 
  G1 Z50 F1500
  RESPOND MSG="Hotend PID in progress..."
  PID_CALIBRATE HEATER=extruder TARGET=260{params.TEMP|default(220)}
  G28
  SAVE_CONFIG
  {% endif %}

#############################################################################################################
#GCODE
#############################################################################################################
[gcode_macro TOGGLE_LED]
description: Toggle LED light on or off
variable_led_state: 0

gcode:
  {% if printer["gcode_macro TOGGLE_LED"].led_state == 0 %}
    F106 S1
    SET_GCODE_VARIABLE MACRO=TOGGLE_LED VARIABLE=led_state VALUE=1
  {% else %}
    F106 S0
    SET_GCODE_VARIABLE MACRO=TOGGLE_LED VARIABLE=led_state VALUE=0
  {% endif %}


[output_pin relay_pin]
pin: PD6
pwm: False
value: 0

[gcode_macro relay_on]
gcode:
    SET_PIN PIN=relay_pin VALUE=1

[gcode_macro relay_off]
gcode:
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    SET_PIN PIN=relay_pin VALUE=0

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1

[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1

[output_pin BOXFAN_pin]
pin: PE2
pwm: False
value: 0
[gcode_macro boxfan_on]
gcode:
    SET_PIN PIN=BOXFAN_pin VALUE=1

[gcode_macro boxfan_off]
gcode:
    SET_PIN PIN=BOXFAN_pin VALUE=0

[gcode_macro TMC]
gcode:
    DUMP_TMC STEPPER=stepper_a
    DUMP_TMC STEPPER=stepper_b
    DUMP_TMC STEPPER=stepper_c
    DUMP_TMC STEPPER=extruder

[gcode_macro save_time]
gcode:
    {% if printer.save_variables.variables.total_time %}
        {% set print_time = printer.save_variables.variables.total_time %}
    {% else %} 
        {% set print_time = 0 %}
    {% endif %}
    {% set print_time = print_time + printer.print_stats.print_duration/3600 %}
    SAVE_VARIABLE VARIABLE=total_time VALUE={print_time}


[respond]
#default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
#default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".

    
